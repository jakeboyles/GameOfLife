(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Cell = Cell;
function Cell(initialState) {
    this.isAlive = initialState;
    this.willBeAlive = false;
}

Cell.prototype.computeNextState = function (aliveNeighborsCount) {
    if (aliveNeighborsCount == 3) {
        this.willBeAlive = true;
    } else if (aliveNeighborsCount > 3 || aliveNeighborsCount < 2) {
        this.willBeAlive = false;
    } else {
        this.willBeAlive = this.isAlive;
    }

    return this.willBeAlive;
};

Cell.prototype.nextState = function () {
    this.isAlive = this.willBeAlive;
};

},{}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CellGrid = CellGrid;

var _Cell = require('./Cell');

function CellGrid(rows, columns) {
    this.cells = new Array(rows);
    var n = 0;
    for (var i = -1; ++i < rows;) {
        this.cells[i] = new Array(columns);
        for (var j = -1; ++j < columns;) {
            var cell = new _Cell.Cell(false);
            cell.n = n++;
            cell.x = i;
            cell.y = j;
            this.cells[i][j] = cell;
        }
    }
}

CellGrid.prototype.aliveNeighborsFor = function (x, y) {
    var self = this,
        neighbors = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];

    function isAliveAt(i, j) {
        if (i < 0 || i >= self.cells.length || j < 0 || j >= self.cells[0].length) {
            return false;
        }
        return self.cells[i][j].isAlive;
    }

    var count = 0;
    for (var i = 0; i < neighbors.length; i++) {
        count += isAliveAt(x + neighbors[i][0], y + neighbors[i][1]) ? 1 : 0;
    }

    return count;
};

CellGrid.prototype.eachCell = function (callback) {
    var rows = this.cells.length,
        columns = this.cells[0].length,
        x,
        y;
    for (var i = 0; i < rows * columns; i++) {
        x = i % rows;y = Math.floor(i / rows);
        callback.apply(this, [this.cells[x][y], x, y]);
    }
};

CellGrid.prototype.reset = function () {
    this.eachCell(function (cell, x, y) {
        cell.isAlive = Math.random() > 0.5;
    });
};

CellGrid.prototype.prepareStep = function () {
    this.eachCell(function (cell, x, y) {
        cell.computeNextState(this.aliveNeighborsFor(x, y));
    });
};

CellGrid.prototype.step = function () {
    this.prepareStep();
    this.eachCell(function (cell, x, y) {
        cell.nextState();
    });
};

CellGrid.prototype.aliveCells = function () {
    var alive = [];
    this.eachCell(function (cell) {
        cell.isAlive && alive.push(cell);
    });
    return alive;
};

},{"./Cell":1}],3:[function(require,module,exports){
'use strict';

var _CellGrid = require('./CellGrid');

var _Cell = require('./Cell');

function GameOfLife(selector) {

    var selector = selector;

    var square = document.querySelector(selector).offsetWidth;

    var svg = d3.select(selector).append("svg:svg").attr("width", square).attr("height", square);

    var circle = svg.selectAll("circle");

    var grid, wRatio, hRatio, radius;

    this.setGrid = function (x, y) {
        var columns = x;
        var rows = y;

        wRatio = square / columns, hRatio = square / rows, radius = Math.min(Math.floor(square / (2 * columns)), Math.floor(square / (2 * rows)));

        grid = new _CellGrid.CellGrid(rows, columns);

        grid.reset();
    };

    this.next = function () {
        grid.step();

        // Get all the alive cells
        circle = circle.data(grid.aliveCells(), function (d) {
            return d.n;
        });

        // Loop through all our live cells
        circle.enter().append("circle").attr("cx", function (d) {
            return d.x * wRatio + radius;
        }).attr("cy", function (d) {
            return d.y * hRatio + radius;
        }).transition().duration(500).attr("r", radius).style("fill", "#0C5CB6");

        // Exit that circle with another animation
        circle.exit().style("fill", "#6DA13E").transition().duration(500).attr("r", 0).remove();

        // Wait one second and do it again.

        setTimeout(this.start, 500);

        if (grid.aliveCells() == 0) {
            alert("Game Finished");
        }
    };
};

var GameOfLife = new GameOfLife('#viz');

$("#submitForm").on("submit", function (e) {

    e.preventDefault();
    var height = $("#height").val();
    var width = $("#width").val();

    window.setInterval(function () {
        GameOfLife.setGrid(height, width);
        GameOfLife.next();
    }, 1000);
});

},{"./Cell":1,"./CellGrid":2}]},{},[3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJqcy9DZWxsLmpzIiwianMvQ2VsbEdyaWQuanMiLCJqcy9tYWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7UUNBZ0I7QUFBVCxTQUFTLElBQVQsQ0FBYyxZQUFkLEVBQTRCO0FBQy9CLFNBQUssT0FBTCxHQUFlLFlBQWYsQ0FEK0I7QUFFL0IsU0FBSyxXQUFMLEdBQW1CLEtBQW5CLENBRitCO0NBQTVCOztBQUtQLEtBQUssU0FBTCxDQUFlLGdCQUFmLEdBQWtDLFVBQVMsbUJBQVQsRUFBOEI7QUFDNUQsUUFBRyx1QkFBdUIsQ0FBdkIsRUFBeUI7QUFDeEIsYUFBSyxXQUFMLEdBQW1CLElBQW5CLENBRHdCO0tBQTVCLE1BRU8sSUFBRyxzQkFBc0IsQ0FBdEIsSUFBMkIsc0JBQXNCLENBQXRCLEVBQXlCO0FBQzFELGFBQUssV0FBTCxHQUFtQixLQUFuQixDQUQwRDtLQUF2RCxNQUVBO0FBQ0gsYUFBSyxXQUFMLEdBQW1CLEtBQUssT0FBTCxDQURoQjtLQUZBOztBQU1QLFdBQU8sS0FBSyxXQUFMLENBVHFEO0NBQTlCOztBQVlsQyxLQUFLLFNBQUwsQ0FBZSxTQUFmLEdBQTJCLFlBQVU7QUFDakMsU0FBSyxPQUFMLEdBQWUsS0FBSyxXQUFMLENBRGtCO0NBQVY7Ozs7Ozs7O1FDZFg7Ozs7QUFBVCxTQUFTLFFBQVQsQ0FBa0IsSUFBbEIsRUFBd0IsT0FBeEIsRUFBaUM7QUFDcEMsU0FBSyxLQUFMLEdBQWEsSUFBSSxLQUFKLENBQVUsSUFBVixDQUFiLENBRG9DO0FBRXBDLFFBQUksSUFBSSxDQUFKLENBRmdDO0FBR3BDLFNBQUksSUFBSSxJQUFJLENBQUMsQ0FBRCxFQUFJLEVBQUUsQ0FBRixHQUFNLElBQU4sR0FBWTtBQUN4QixhQUFLLEtBQUwsQ0FBVyxDQUFYLElBQWdCLElBQUksS0FBSixDQUFVLE9BQVYsQ0FBaEIs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LElBSFQsQ0FHYyxHQUhkLEVBR21CLENBSG5CLEVBSUssTUFKTDs7OztBQWZrQixrQkF1QmxCLENBQVcsS0FBSyxLQUFMLEVBQVcsR0FBdEIsRUF2QmtCOztBQXlCbEIsWUFBRyxLQUFLLFVBQUwsTUFBcUIsQ0FBckIsRUFDSDtBQUNJLGtCQUFNLGVBQU4sRUFESjtTQURBO0tBekJRLENBN0JhO0NBQTdCOztBQWlFQSxJQUFJLGFBQWEsSUFBSSxVQUFKLENBQWUsTUFBZixDQUFiOztBQUVKLEVBQUUsYUFBRixFQUFpQixFQUFqQixDQUFvQixRQUFwQixFQUE2QixVQUFTLENBQVQsRUFBVzs7QUFFcEMsTUFBRSxjQUFGLEdBRm9DO0FBR3BDLFFBQUksU0FBUyxFQUFFLFNBQUYsRUFBYSxHQUFiLEVBQVQsQ0FIZ0M7QUFJcEMsUUFBSSxRQUFRLEVBQUUsUUFBRixFQUFZLEdBQVosRUFBUixDQUpnQzs7QUFNcEMsV0FBTyxXQUFQLENBQW1CLFlBQVU7QUFDekIsbUJBQVcsT0FBWCxDQUFtQixNQUFuQixFQUEwQixLQUExQixFQUR5QjtBQUV6QixtQkFBVyxJQUFYLEdBRnlCO0tBQVYsRUFHaEIsSUFISCxFQU5vQztDQUFYLENBQTdCIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsImV4cG9ydCBmdW5jdGlvbiBDZWxsKGluaXRpYWxTdGF0ZSkge1xuICAgIHRoaXMuaXNBbGl2ZSA9IGluaXRpYWxTdGF0ZTtcbiAgICB0aGlzLndpbGxCZUFsaXZlID0gZmFsc2U7XG59XG5cbkNlbGwucHJvdG90eXBlLmNvbXB1dGVOZXh0U3RhdGUgPSBmdW5jdGlvbihhbGl2ZU5laWdoYm9yc0NvdW50KSB7XG4gICAgaWYoYWxpdmVOZWlnaGJvcnNDb3VudCA9PSAzKXtcbiAgICAgICAgdGhpcy53aWxsQmVBbGl2ZSA9IHRydWU7XG4gICAgfSBlbHNlIGlmKGFsaXZlTmVpZ2hib3JzQ291bnQgPiAzIHx8IGFsaXZlTmVpZ2hib3JzQ291bnQgPCAyKSB7XG4gICAgICAgIHRoaXMud2lsbEJlQWxpdmUgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLndpbGxCZUFsaXZlID0gdGhpcy5pc0FsaXZlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLndpbGxCZUFsaXZlO1xufTtcblxuQ2VsbC5wcm90b3R5cGUubmV4dFN0YXRlID0gZnVuY3Rpb24oKXtcbiAgICB0aGlzLmlzQWxpdmUgPSB0aGlzLndpbGxCZUFsaXZlO1xufSIsImltcG9ydCB7IENlbGwgfSBmcm9tICcuL0NlbGwnO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBDZWxsR3JpZChyb3dzLCBjb2x1bW5zKSB7XG4gICAgdGhpcy5jZWxscyA9IG5ldyBBcnJheShyb3dzKTtcbiAgICB2YXIgbiA9IDA7XG4gICAgZm9yKHZhciBpID0gLTE7ICsraSA8IHJvd3M7KXtcbiAgICAgICAgdGhpcy5jZWxsc1tpXSA9IG5ldyBBcnJheShjb2x1bW5zKTtcbiAgICAgICAgZm9yKHZhciBqID0gLTE7ICsraiA8IGNvbHVtbnM7ICl7XG4gICAgICAgICAgICB2YXIgY2VsbCA9IG5ldyBDZWxsKGZhbHNlKTtcbiAgICAgICAgICAgIGNlbGwubiA9IG4rKztcbiAgICAgICAgICAgIGNlbGwueCA9IGk7XG4gICAgICAgICAgICBjZWxsLnkgPSBqO1xuICAgICAgICAgICAgdGhpcy5jZWxsc1tpXVtqXSA9IGNlbGw7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbkNlbGxHcmlkLnByb3RvdHlwZS5hbGl2ZU5laWdoYm9yc0ZvciA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgIG5laWdoYm9ycyA9IFtbLTEsLTFdLFstMSwwXSxbLTEsMV0sWzAsLTFdLFswLDFdLFsxLC0xXSxbMSwwXSxbMSwxXV07XG5cbiAgICBmdW5jdGlvbiBpc0FsaXZlQXQoaSwgail7XG4gICAgICAgIGlmKGkgPCAwIHx8IGkgPj0gc2VsZi5jZWxscy5sZW5ndGggfHwgaiA8IDAgfHwgaiA+PSBzZWxmLmNlbGxzWzBdLmxlbmd0aCl7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlbGYuY2VsbHNbaV1bal0uaXNBbGl2ZTtcbiAgICB9XG5cbiAgICB2YXIgY291bnQgPSAwO1xuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBuZWlnaGJvcnMubGVuZ3RoOyBpKyspe1xuICAgICAgICBjb3VudCArPSAoaXNBbGl2ZUF0KHgrbmVpZ2hib3JzW2ldWzBdLHkrbmVpZ2hib3JzW2ldWzFdKSk/MTowO1xuICAgIH1cblxuICAgIHJldHVybiBjb3VudDtcbn07XG5cbkNlbGxHcmlkLnByb3RvdHlwZS5lYWNoQ2VsbCA9IGZ1bmN0aW9uKGNhbGxiYWNrKXtcbiAgICB2YXIgcm93cyA9IHRoaXMuY2VsbHMubGVuZ3RoLFxuICAgICAgICBjb2x1bW5zID0gdGhpcy5jZWxsc1swXS5sZW5ndGgsXG4gICAgICAgIHgseTtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgcm93cyAqIGNvbHVtbnM7IGkrKyl7XG4gICAgICAgIHggPSBpJXJvd3M7IHkgPSBNYXRoLmZsb29yKGkvcm93cyk7XG4gICAgICAgIGNhbGxiYWNrLmFwcGx5KHRoaXMsW3RoaXMuY2VsbHNbeF1beV0seCx5XSk7XG4gICAgfVxufTtcblxuQ2VsbEdyaWQucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKXtcbiAgICB0aGlzLmVhY2hDZWxsKGZ1bmN0aW9uKGNlbGwseCx5KXtcbiAgICAgICAgY2VsbC5pc0FsaXZlID0gKE1hdGgucmFuZG9tKCkgPiAwLjUpO1xuICAgIH0pO1xufTtcblxuQ2VsbEdyaWQucHJvdG90eXBlLnByZXBhcmVTdGVwID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5lYWNoQ2VsbChmdW5jdGlvbihjZWxsLHgseSl7XG4gICAgICAgIGNlbGwuY29tcHV0ZU5leHRTdGF0ZSh0aGlzLmFsaXZlTmVpZ2hib3JzRm9yKHgseSkpO1xuICAgIH0pO1xufTtcblxuQ2VsbEdyaWQucHJvdG90eXBlLnN0ZXAgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnByZXBhcmVTdGVwKCk7XG4gICAgdGhpcy5lYWNoQ2VsbChmdW5jdGlvbihjZWxsLHgseSl7XG4gICAgICAgIGNlbGwubmV4dFN0YXRlKCk7XG4gICAgfSk7XG59O1xuXG5DZWxsR3JpZC5wcm90b3R5cGUuYWxpdmVDZWxscyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhbGl2ZSA9IFtdO1xuICAgIHRoaXMuZWFjaENlbGwoZnVuY3Rpb24oY2VsbCl7XG4gICAgICAgIGNlbGwuaXNBbGl2ZSAmJiBhbGl2ZS5wdXNoKGNlbGwpO1xuICAgIH0pO1xuICAgIHJldHVybiBhbGl2ZTtcbn07IiwiaW1wb3J0IHsgQ2VsbEdyaWQgfSBmcm9tICcuL0NlbGxHcmlkJztcbmltcG9ydCB7IENlbGwgfSBmcm9tICcuL0NlbGwnO1xuXG5cbmZ1bmN0aW9uIEdhbWVPZkxpZmUoc2VsZWN0b3Ipe1xuXG4gICAgdmFyIHNlbGVjdG9yID0gc2VsZWN0b3I7XG5cbiAgICB2YXIgc3F1YXJlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcikub2Zmc2V0V2lkdGg7XG5cbiAgICB2YXIgc3ZnID0gZDMuc2VsZWN0KHNlbGVjdG9yKS5hcHBlbmQoXCJzdmc6c3ZnXCIpXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgc3F1YXJlKVxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCBzcXVhcmUpO1xuXG4gICAgdmFyIGNpcmNsZSA9IHN2Zy5zZWxlY3RBbGwoXCJjaXJjbGVcIik7XG5cbiAgICB2YXIgZ3JpZCx3UmF0aW8saFJhdGlvLHJhZGl1cztcblxuXG4gICAgdGhpcy5zZXRHcmlkID0gZnVuY3Rpb24oeCx5KXtcbiAgICAgICAgdmFyIGNvbHVtbnMgPSB4O1xuICAgICAgICB2YXIgcm93cyA9IHk7XG5cbiAgICAgICAgd1JhdGlvID0gc3F1YXJlL2NvbHVtbnMsXG4gICAgICAgIGhSYXRpbyA9IHNxdWFyZS9yb3dzLFxuICAgICAgICByYWRpdXMgPSBNYXRoLm1pbihNYXRoLmZsb29yKHNxdWFyZS8oMipjb2x1bW5zKSksTWF0aC5mbG9vcihzcXVhcmUvKDIqcm93cykpKTtcblxuICAgICAgICBncmlkID0gbmV3IENlbGxHcmlkKHJvd3MsY29sdW1ucyk7XG5cbiAgICAgICAgZ3JpZC5yZXNldCgpO1xuXG4gICAgfVxuXG4gICAgdGhpcy5uZXh0ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgZ3JpZC5zdGVwKCk7XG5cbiAgICAgICAgLy8gR2V0IGFsbCB0aGUgYWxpdmUgY2VsbHNcbiAgICAgICAgY2lyY2xlID0gY2lyY2xlLmRhdGEoZ3JpZC5hbGl2ZUNlbGxzKCksZnVuY3Rpb24oZCl7cmV0dXJuIGQubn0pO1xuXG4gICAgICAgIC8vIExvb3AgdGhyb3VnaCBhbGwgb3VyIGxpdmUgY2VsbHNcbiAgICAgICAgY2lyY2xlLmVudGVyKCkuYXBwZW5kKFwiY2lyY2xlXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjeFwiLCBmdW5jdGlvbihkKXtyZXR1cm4gZC54KndSYXRpbyArIHJhZGl1c30pXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjeVwiLCBmdW5jdGlvbihkKXtyZXR1cm4gZC55KmhSYXRpbyArIHJhZGl1c30pXG4gICAgICAgICAgICAgICAgLnRyYW5zaXRpb24oKS5kdXJhdGlvbig1MDApXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiclwiLCByYWRpdXMpXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIixcIiMwQzVDQjZcIik7XG5cbiAgICAgICAgLy8gRXhpdCB0aGF0IGNpcmNsZSB3aXRoIGFub3RoZXIgYW5pbWF0aW9uXG4gICAgICAgIGNpcmNsZS5leGl0KClcbiAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIixcIiM2REExM0VcIilcbiAgICAgICAgICAgIC50cmFuc2l0aW9uKCkuZHVyYXRpb24oNTAwKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiclwiLCAwKVxuICAgICAgICAgICAgLnJlbW92ZSgpO1xuXG4gICAgICAgIC8vIFdhaXQgb25lIHNlY29uZCBhbmQgZG8gaXQgYWdhaW4uXG5cbiAgICAgICAgc2V0VGltZW91dCh0aGlzLnN0YXJ0LDUwMCk7XG5cbiAgICAgICAgaWYoZ3JpZC5hbGl2ZUNlbGxzKCkgPT0gMCApXG4gICAgICAgIHtcbiAgICAgICAgICAgIGFsZXJ0KFwiR2FtZSBGaW5pc2hlZFwiKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxufTtcblxuXG5cbnZhciBHYW1lT2ZMaWZlID0gbmV3IEdhbWVPZkxpZmUoJyN2aXonKTtcblxuJChcIiNzdWJtaXRGb3JtXCIpLm9uKFwic3VibWl0XCIsZnVuY3Rpb24oZSl7XG5cbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgdmFyIGhlaWdodCA9ICQoXCIjaGVpZ2h0XCIpLnZhbCgpO1xuICAgIHZhciB3aWR0aCA9ICQoXCIjd2lkdGhcIikudmFsKCk7XG5cbiAgICB3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtcbiAgICAgICAgR2FtZU9mTGlmZS5zZXRHcmlkKGhlaWdodCx3aWR0aCk7XG4gICAgICAgIEdhbWVPZkxpZmUubmV4dCgpO1xuICAgIH0sIDEwMDApO1xuXG59KVxuIl19
