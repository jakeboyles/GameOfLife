(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Cell = Cell;
function Cell(initialState) {
    this.isAlive = initialState;
    this.willBeAlive = false;
}

Cell.prototype.computeNextState = function (aliveNeighborsCount) {
    if (aliveNeighborsCount == 3) {
        this.willBeAlive = true;
    } else if (aliveNeighborsCount > 3 || aliveNeighborsCount < 2) {
        this.willBeAlive = false;
    } else {
        this.willBeAlive = this.isAlive;
    }

    return this.willBeAlive;
};

Cell.prototype.nextState = function () {
    this.isAlive = this.willBeAlive;
};

},{}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CellGrid = CellGrid;

var _Cell = require('./Cell');

function CellGrid(rows, columns) {
    this.cells = new Array(rows);
    var n = 0;
    for (var i = -1; ++i < rows;) {
        this.cells[i] = new Array(columns);
        for (var j = -1; ++j < columns;) {
            var cell = new _Cell.Cell(false);
            cell.n = n++;
            cell.x = i;
            cell.y = j;
            this.cells[i][j] = cell;
        }
    }
}

CellGrid.prototype.aliveNeighborsFor = function (x, y) {
    var self = this,
        neighbors = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];

    function isAliveAt(i, j) {
        if (i < 0 || i >= self.cells.length || j < 0 || j >= self.cells[0].length) {
            return false;
        }
        return self.cells[i][j].isAlive;
    }

    var count = 0;
    for (var i = 0; i < neighbors.length; i++) {
        count += isAliveAt(x + neighbors[i][0], y + neighbors[i][1]) ? 1 : 0;
    }

    return count;
};

CellGrid.prototype.eachCell = function (callback) {
    var rows = this.cells.length,
        columns = this.cells[0].length,
        x,
        y;
    for (var i = 0; i < rows * columns; i++) {
        x = i % rows;y = Math.floor(i / rows);
        callback.apply(this, [this.cells[x][y], x, y]);
    }
};

CellGrid.prototype.reset = function () {
    this.eachCell(function (cell, x, y) {
        cell.isAlive = Math.random() > 0.5;
    });
};

CellGrid.prototype.prepareStep = function () {
    this.eachCell(function (cell, x, y) {
        cell.computeNextState(this.aliveNeighborsFor(x, y));
    });
};

CellGrid.prototype.step = function () {
    this.prepareStep();
    this.eachCell(function (cell, x, y) {
        cell.nextState();
    });
};

CellGrid.prototype.aliveCells = function () {
    var alive = [];
    this.eachCell(function (cell) {
        cell.isAlive && alive.push(cell);
    });
    return alive;
};

},{"./Cell":1}],3:[function(require,module,exports){
'use strict';

var _CellGrid = require('./CellGrid');

var _Cell = require('./Cell');

function GameOfLife(selector) {

    var that = this;

    var selector = selector;

    var square = document.querySelector(selector).offsetWidth;

    var gameFinished = false;

    var svg = d3.select(selector).append("svg:svg").attr("width", square).attr("height", square);

    var circle = svg.selectAll("circle");

    var grid, wRatio, hRatio, radius;

    this.setGrid = function (x, y) {
        var columns = x;
        var rows = y;

        wRatio = square / columns, hRatio = square / rows, radius = Math.min(Math.floor(square / (2 * columns)), Math.floor(square / (2 * rows)));

        grid = new _CellGrid.CellGrid(rows, columns);

        grid.reset();
    };

    this.reset = function () {
        gameFinished = false;
    };

    this.getState = function () {
        return gameFinished;
    };

    this.start = function () {
        var goNow = setInterval(function () {
            alert(that.getState());
            if (that.getState() == true) {
                alert("DONE");
                clearInterval(goNow);
            }
            that.next();
        }, 500);
    };

    this.next = function () {
        grid.step();

        // Get all the alive cells
        circle = circle.data(grid.aliveCells(), function (d) {
            return d.n;
        });

        // Loop through all our live cells
        circle.enter().append("circle").attr("cx", function (d) {
            return d.x * wRatio + radius;
        }).attr("cy", function (d) {
            return d.y * hRatio + radius;
        }).transition().duration(500).attr("r", radius).style("fill", "#0C5CB6");

        // Exit that circle with another animation
        circle.exit().style("fill", "#6DA13E").transition().duration(500).attr("r", 0).remove();

        // Wait one second and do it again.

        setTimeout(this.start, 500);

        if (grid.aliveCells() == 0) {
            gameFinished = true;
        }
    };
};

var GameOfLife = new GameOfLife('#viz');

$("#submitForm").on("submit", function (e) {
    GameOfLife.reset();
    e.preventDefault();
    var height = $("#height").val();
    var width = $("#width").val();

    GameOfLife.setGrid(height, width);

    GameOfLife.start();
});

},{"./Cell":1,"./CellGrid":2}]},{},[3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJqcy9DZWxsLmpzIiwianMvQ2VsbEdyaWQuanMiLCJqcy9tYWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7UUNBZ0I7QUFBVCxTQUFTLElBQVQsQ0FBYyxZQUFkLEVBQTRCO0FBQy9CLFNBQUssT0FBTCxHQUFlLFlBQWYsQ0FEK0I7QUFFL0IsU0FBSyxXQUFMLEdBQW1CLEtBQW5CLENBRitCO0NBQTVCOztBQUtQLEtBQUssU0FBTCxDQUFlLGdCQUFmLEdBQWtDLFVBQVMsbUJBQVQsRUFBOEI7QUFDNUQsUUFBRyx1QkFBdUIsQ0FBdkIsRUFBeUI7QUFDeEIsYUFBSyxXQUFMLEdBQW1CLElBQW5CLENBRHdCO0tBQTVCLE1BRU8sSUFBRyxzQkFBc0IsQ0FBdEIsSUFBMkIsc0JBQXNCLENBQXRCLEVBQXlCO0FBQzFELGFBQUssV0FBTCxHQUFtQixLQUFuQixDQUQwRDtLQUF2RCxNQUVBO0FBQ0gsYUFBSyxXQUFMLEdBQW1CLEtBQUssT0FBTCxDQURoQjtLQUZBOztBQU1QLFdBQU8sS0FBSyxXQUFMLENBVHFEO0NBQTlCOztBQVlsQyxLQUFLLFNBQUwsQ0FBZSxTQUFmLEdBQTJCLFlBQVU7QUFDakMsU0FBSyxPQUFMLEdBQWUsS0FBSyxXQUFMLENBRGtCO0NBQVY7Ozs7Ozs7O1FDZFg7Ozs7QUFBVCxTQUFTLFFBQVQsQ0FBa0IsSUFBbEIsRUFBd0IsT0FBeEIsRUFBaUM7QUFDcEMsU0FBSyxLQUFMLEdBQWEsSUFBSSxLQUFKLENBQVUsSUFBVixDQUFiLENBRG9DO0FBRXBDLFFBQUksSUFBSSxDQUFKLENBRmdDO0FBR3BDLFNBQUksSUFBSSxJQUFJLENBQUMsQ0FBRCxFQUFJLEVBQUUsQ0FBRixHQUFNLElBQU4sR0FBWTtBQUN4QixhQUFLLEtBQUwsQ0FBVyxDQUFYLElBQWdCLElBQUksS0FBSixDQUFVLE9BQVYsQ0FBaEIs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Q0FBWCxDQUE3QiIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJleHBvcnQgZnVuY3Rpb24gQ2VsbChpbml0aWFsU3RhdGUpIHtcbiAgICB0aGlzLmlzQWxpdmUgPSBpbml0aWFsU3RhdGU7XG4gICAgdGhpcy53aWxsQmVBbGl2ZSA9IGZhbHNlO1xufVxuXG5DZWxsLnByb3RvdHlwZS5jb21wdXRlTmV4dFN0YXRlID0gZnVuY3Rpb24oYWxpdmVOZWlnaGJvcnNDb3VudCkge1xuICAgIGlmKGFsaXZlTmVpZ2hib3JzQ291bnQgPT0gMyl7XG4gICAgICAgIHRoaXMud2lsbEJlQWxpdmUgPSB0cnVlO1xuICAgIH0gZWxzZSBpZihhbGl2ZU5laWdoYm9yc0NvdW50ID4gMyB8fCBhbGl2ZU5laWdoYm9yc0NvdW50IDwgMikge1xuICAgICAgICB0aGlzLndpbGxCZUFsaXZlID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy53aWxsQmVBbGl2ZSA9IHRoaXMuaXNBbGl2ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy53aWxsQmVBbGl2ZTtcbn07XG5cbkNlbGwucHJvdG90eXBlLm5leHRTdGF0ZSA9IGZ1bmN0aW9uKCl7XG4gICAgdGhpcy5pc0FsaXZlID0gdGhpcy53aWxsQmVBbGl2ZTtcbn0iLCJpbXBvcnQgeyBDZWxsIH0gZnJvbSAnLi9DZWxsJztcblxuXG5leHBvcnQgZnVuY3Rpb24gQ2VsbEdyaWQocm93cywgY29sdW1ucykge1xuICAgIHRoaXMuY2VsbHMgPSBuZXcgQXJyYXkocm93cyk7XG4gICAgdmFyIG4gPSAwO1xuICAgIGZvcih2YXIgaSA9IC0xOyArK2kgPCByb3dzOyl7XG4gICAgICAgIHRoaXMuY2VsbHNbaV0gPSBuZXcgQXJyYXkoY29sdW1ucyk7XG4gICAgICAgIGZvcih2YXIgaiA9IC0xOyArK2ogPCBjb2x1bW5zOyApe1xuICAgICAgICAgICAgdmFyIGNlbGwgPSBuZXcgQ2VsbChmYWxzZSk7XG4gICAgICAgICAgICBjZWxsLm4gPSBuKys7XG4gICAgICAgICAgICBjZWxsLnggPSBpO1xuICAgICAgICAgICAgY2VsbC55ID0gajtcbiAgICAgICAgICAgIHRoaXMuY2VsbHNbaV1bal0gPSBjZWxsO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5DZWxsR3JpZC5wcm90b3R5cGUuYWxpdmVOZWlnaGJvcnNGb3IgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBuZWlnaGJvcnMgPSBbWy0xLC0xXSxbLTEsMF0sWy0xLDFdLFswLC0xXSxbMCwxXSxbMSwtMV0sWzEsMF0sWzEsMV1dO1xuXG4gICAgZnVuY3Rpb24gaXNBbGl2ZUF0KGksIGope1xuICAgICAgICBpZihpIDwgMCB8fCBpID49IHNlbGYuY2VsbHMubGVuZ3RoIHx8IGogPCAwIHx8IGogPj0gc2VsZi5jZWxsc1swXS5sZW5ndGgpe1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZWxmLmNlbGxzW2ldW2pdLmlzQWxpdmU7XG4gICAgfVxuXG4gICAgdmFyIGNvdW50ID0gMDtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgbmVpZ2hib3JzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgY291bnQgKz0gKGlzQWxpdmVBdCh4K25laWdoYm9yc1tpXVswXSx5K25laWdoYm9yc1tpXVsxXSkpPzE6MDtcbiAgICB9XG5cbiAgICByZXR1cm4gY291bnQ7XG59O1xuXG5DZWxsR3JpZC5wcm90b3R5cGUuZWFjaENlbGwgPSBmdW5jdGlvbihjYWxsYmFjayl7XG4gICAgdmFyIHJvd3MgPSB0aGlzLmNlbGxzLmxlbmd0aCxcbiAgICAgICAgY29sdW1ucyA9IHRoaXMuY2VsbHNbMF0ubGVuZ3RoLFxuICAgICAgICB4LHk7XG4gICAgZm9yKHZhciBpID0gMDsgaSA8IHJvd3MgKiBjb2x1bW5zOyBpKyspe1xuICAgICAgICB4ID0gaSVyb3dzOyB5ID0gTWF0aC5mbG9vcihpL3Jvd3MpO1xuICAgICAgICBjYWxsYmFjay5hcHBseSh0aGlzLFt0aGlzLmNlbGxzW3hdW3ldLHgseV0pO1xuICAgIH1cbn07XG5cbkNlbGxHcmlkLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKCl7XG4gICAgdGhpcy5lYWNoQ2VsbChmdW5jdGlvbihjZWxsLHgseSl7XG4gICAgICAgIGNlbGwuaXNBbGl2ZSA9IChNYXRoLnJhbmRvbSgpID4gMC41KTtcbiAgICB9KTtcbn07XG5cbkNlbGxHcmlkLnByb3RvdHlwZS5wcmVwYXJlU3RlcCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuZWFjaENlbGwoZnVuY3Rpb24oY2VsbCx4LHkpe1xuICAgICAgICBjZWxsLmNvbXB1dGVOZXh0U3RhdGUodGhpcy5hbGl2ZU5laWdoYm9yc0Zvcih4LHkpKTtcbiAgICB9KTtcbn07XG5cbkNlbGxHcmlkLnByb3RvdHlwZS5zdGVwID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5wcmVwYXJlU3RlcCgpO1xuICAgIHRoaXMuZWFjaENlbGwoZnVuY3Rpb24oY2VsbCx4LHkpe1xuICAgICAgICBjZWxsLm5leHRTdGF0ZSgpO1xuICAgIH0pO1xufTtcblxuQ2VsbEdyaWQucHJvdG90eXBlLmFsaXZlQ2VsbHMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYWxpdmUgPSBbXTtcbiAgICB0aGlzLmVhY2hDZWxsKGZ1bmN0aW9uKGNlbGwpe1xuICAgICAgICBjZWxsLmlzQWxpdmUgJiYgYWxpdmUucHVzaChjZWxsKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYWxpdmU7XG59OyIsImltcG9ydCB7IENlbGxHcmlkIH0gZnJvbSAnLi9DZWxsR3JpZCc7XG5pbXBvcnQgeyBDZWxsIH0gZnJvbSAnLi9DZWxsJztcblxuXG5mdW5jdGlvbiBHYW1lT2ZMaWZlKHNlbGVjdG9yKXtcblxuICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgIHZhciBzZWxlY3RvciA9IHNlbGVjdG9yO1xuXG4gICAgdmFyIHNxdWFyZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpLm9mZnNldFdpZHRoO1xuXG4gICAgdmFyIGdhbWVGaW5pc2hlZCA9IGZhbHNlO1xuXG4gICAgdmFyIHN2ZyA9IGQzLnNlbGVjdChzZWxlY3RvcikuYXBwZW5kKFwic3ZnOnN2Z1wiKVxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIHNxdWFyZSlcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgc3F1YXJlKTtcblxuICAgIHZhciBjaXJjbGUgPSBzdmcuc2VsZWN0QWxsKFwiY2lyY2xlXCIpO1xuXG4gICAgdmFyIGdyaWQsd1JhdGlvLGhSYXRpbyxyYWRpdXM7XG5cblxuICAgIHRoaXMuc2V0R3JpZCA9IGZ1bmN0aW9uKHgseSl7XG4gICAgICAgIHZhciBjb2x1bW5zID0geDtcbiAgICAgICAgdmFyIHJvd3MgPSB5O1xuXG4gICAgICAgIHdSYXRpbyA9IHNxdWFyZS9jb2x1bW5zLFxuICAgICAgICBoUmF0aW8gPSBzcXVhcmUvcm93cyxcbiAgICAgICAgcmFkaXVzID0gTWF0aC5taW4oTWF0aC5mbG9vcihzcXVhcmUvKDIqY29sdW1ucykpLE1hdGguZmxvb3Ioc3F1YXJlLygyKnJvd3MpKSk7XG5cbiAgICAgICAgZ3JpZCA9IG5ldyBDZWxsR3JpZChyb3dzLGNvbHVtbnMpO1xuXG4gICAgICAgIGdyaWQucmVzZXQoKTtcblxuICAgIH1cblxuICAgIHRoaXMucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZ2FtZUZpbmlzaGVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5nZXRTdGF0ZSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiBnYW1lRmluaXNoZWQ7XG4gICAgfVxuXG4gICAgdGhpcy5zdGFydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZ29Ob3cgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpe1xuICAgICAgICAgICAgYWxlcnQodGhhdC5nZXRTdGF0ZSgpKTtcbiAgICAgICAgaWYodGhhdC5nZXRTdGF0ZSgpID09IHRydWUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGFsZXJ0KFwiRE9ORVwiKTtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoZ29Ob3cpO1xuICAgICAgICB9XG4gICAgICAgIHRoYXQubmV4dCgpO1xuICAgICAgICB9LCA1MDApO1xuICAgIH1cblxuICAgIHRoaXMubmV4dCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIGdyaWQuc3RlcCgpO1xuXG4gICAgICAgIC8vIEdldCBhbGwgdGhlIGFsaXZlIGNlbGxzXG4gICAgICAgIGNpcmNsZSA9IGNpcmNsZS5kYXRhKGdyaWQuYWxpdmVDZWxscygpLGZ1bmN0aW9uKGQpe3JldHVybiBkLm59KTtcblxuICAgICAgICAvLyBMb29wIHRocm91Z2ggYWxsIG91ciBsaXZlIGNlbGxzXG4gICAgICAgIGNpcmNsZS5lbnRlcigpLmFwcGVuZChcImNpcmNsZVwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY3hcIiwgZnVuY3Rpb24oZCl7cmV0dXJuIGQueCp3UmF0aW8gKyByYWRpdXN9KVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY3lcIiwgZnVuY3Rpb24oZCl7cmV0dXJuIGQueSpoUmF0aW8gKyByYWRpdXN9KVxuICAgICAgICAgICAgICAgIC50cmFuc2l0aW9uKCkuZHVyYXRpb24oNTAwKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInJcIiwgcmFkaXVzKVxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsXCIjMEM1Q0I2XCIpO1xuXG4gICAgICAgIC8vIEV4aXQgdGhhdCBjaXJjbGUgd2l0aCBhbm90aGVyIGFuaW1hdGlvblxuICAgICAgICBjaXJjbGUuZXhpdCgpXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsXCIjNkRBMTNFXCIpXG4gICAgICAgICAgICAudHJhbnNpdGlvbigpLmR1cmF0aW9uKDUwMClcbiAgICAgICAgICAgICAgICAuYXR0cihcInJcIiwgMClcbiAgICAgICAgICAgIC5yZW1vdmUoKTtcblxuICAgICAgICAvLyBXYWl0IG9uZSBzZWNvbmQgYW5kIGRvIGl0IGFnYWluLlxuXG4gICAgICAgIHNldFRpbWVvdXQodGhpcy5zdGFydCw1MDApO1xuXG4gICAgICAgIGlmKGdyaWQuYWxpdmVDZWxscygpID09IDAgKVxuICAgICAgICB7XG4gICAgICAgICAgICBnYW1lRmluaXNoZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG59O1xuXG5cblxudmFyIEdhbWVPZkxpZmUgPSBuZXcgR2FtZU9mTGlmZSgnI3ZpeicpO1xuXG4kKFwiI3N1Ym1pdEZvcm1cIikub24oXCJzdWJtaXRcIixmdW5jdGlvbihlKXtcbiAgICBHYW1lT2ZMaWZlLnJlc2V0KCk7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHZhciBoZWlnaHQgPSAkKFwiI2hlaWdodFwiKS52YWwoKTtcbiAgICB2YXIgd2lkdGggPSAkKFwiI3dpZHRoXCIpLnZhbCgpO1xuXG4gICAgR2FtZU9mTGlmZS5zZXRHcmlkKGhlaWdodCx3aWR0aCk7XG5cbiAgICBHYW1lT2ZMaWZlLnN0YXJ0KCk7XG59KTtcbiJdfQ==
